
-> Yield

-> public VideoService(IFileReader fileReader = null)

   Optional parameter

-> Dependency Injection Framework
   NInject, autofac

-> Mocking Frameworks

-> Moq documentation
   https://documentation.help/Moq/

-> We also have a Verify method. And with this we can verify 
   any given method is called with the right arguments or not.

-> use mocks, but just for removing external resources from your unit tests.

-> Writing unit and integration tests is the job of a software developer.

-> No one cares how good of a coder or how intelligent you are 
   if you cannot work with others in a professional manner.

->  So, writing unit and integration tests is your job as a software developer.
    End-to-End tests are a different story. Sometimes they're written by
    developers, other times they're written by test engineers.
    So a test engineer doesn't care how you have implemented a given feature.
    They don't care about your classes, and methods, and parameters,
    they test the application at a high level, like an end user,
    so, they run the application and test it manually, or
    they can write automated tests that simulate a real user.
    Either way, they don't care about the internal implementation.


->      public void DownloadInstaller_WithInValidArgs_ReturnFalse(string customerName, string installerName)
        {
           _fileDownloader.Setup(x => x.DownloadFile("", "")).Throws<WebException>();
            var result = _installerHelper.DownloadInstaller(customerName, installerName);

            Assert.That(result, Is.False);
        }

	This test case will fail because argument of a mock setup must match with the test call
	So setup argument in the mock must match with the arguments of test call


-> One thing to keep in mind that in unit testing we are not testing the external resources,
   testing external resources is part of our integration testing.

   Thats why we needed a mock for external resources and programmed it's behaviour.


-> SOC